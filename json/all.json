{
  "source": "..\\docs\\all.md",
  "desc": [
    {
      "type": "html",
      "pre": false,
      "text": "<!-- [start-include:overview.md] -->\n"
    }
  ],
  "modules": [
    {
      "textRaw": "综述",
      "name": "综述",
      "desc": "<p>JS自动化测试 automation_js 使用 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript\">JavaScript</a> 作为脚本语言，目前使用 <a href=\"http://openjdk.java.net/projects/nashorn/\">Java 1.8 Nashorn</a> 作为脚本引擎，支持ES5与部分ES6特性。</p>\n<ul>\n<li><p>因为是基于JavaScript的，学习API之前建议先学习JavaScript的基本语法和内置对象。</p>\n</li>\n<li><p>建议通过 <a href=\"https://www.jetbrains.com/idea/\">IntelliJ IDEA</a>  开发，支持 js 代码提示</p>\n</li>\n<li><p>支持通过 jar 包方式直接运行</p>\n</li>\n<li><p>浏览器驱动建议使用 <a href=\"http://npm.taobao.org/mirrors/chromedriver/\">chromedriver</a></p>\n</li>\n</ul>\n<p>本文档的章节大致上是以模块来分的，总体上可以分成内置基础函数跟业务扩展函数，包括 元素操作，浏览器窗口操作, http 请求，数据库操作等。</p>\n<p>内置函数的部分又可以大致分为基于选择器和基于元素的操作。基于选择器的操作是传统 selenium的方式，通过选择来查找元素。</p>\n<p>例如 selenium <code>findElement(By.id(&quot;veasion&quot;))</code>, <code>findElement(By.name(&quot;veasion&quot;))</code>等，在 js 脚本中则是 <code>findOne(&quot;id=veasion&quot;)</code>, <code>findOne(&quot;name=veasion&quot;)</code>。这种方式省略了 By 这个参数，而是通过字符串表示。</p>\n<p>其他部分主要包括：</p>\n<ul>\n<li><p>WebDriverBinding: driver 驱动对象。元素操作、元素查找、窗口、iframe、数据库、http、按键、url等。</p>\n</li>\n<li><p>WebElementBinding: element 元素对象。操作元素点击、输入、文本、属性、查找等。</p>\n</li>\n<li><p>EnvironmentBinding: env 环境变量。读取和操作环境变量数据等。</p>\n</li>\n<li><p>JdbcConnectionBinding: jdbc 数据库连接。操作数据库</p>\n</li>\n<li><p>Auto: auto 模块及函数封装。</p>\n</li>\n<li><p>Demo: demo 示例。</p>\n</li>\n</ul>\n<p>除此之外，还支持业务脚本扩展，如业务基础扩展 <code>auto.getIcon()</code> 见 include/auto.js， 模块扩展见 common 目录，依赖扩展见 dependency，脚本代码示例见 script/readme.js。如何运行启动程序相关请见 Q&amp;A</p>\n",
      "modules": [
        {
          "textRaw": "自动化测试示例：",
          "name": "自动化测试示例：",
          "desc": "<ul>\n<li>百度搜索 “中国”，打印出搜索结果</li>\n</ul>\n<pre><code class=\"lang-js\">open(&quot;https://www.baidu.com&quot;);\nsendKeys(&#39;id=kw&#39;, &#39;中国&#39;);\nclick(&quot;css=input[value=&#39;百度一下&#39;]&quot;);\nwaitForPageLoaded();\nlet list = findDisplayed(&#39;css=div#content_left &gt; div&#39;);\nfor (let i in list) {\n    println(list[i].text());\n}\n</code></pre>\n<ul>\n<li>百度搜索 “中国”，进入百度百科结果</li>\n</ul>\n<pre><code class=\"lang-js\">// 百度搜索，调用封装函数\nbaiduSearch(&#39;中国&#39;);\n// 获取搜索结果\nlet list = findDisplayed(&#39;css=div#content_left &gt; div&#39;);\n// 变量搜索结果\nfor (let i in list) {\n    let element = list[i].findOne(&quot;css=h3 &gt; a&quot;);\n    // 判断结果是否为百度百科\n    if (element &amp;&amp; element.text().endsWith(&quot;百度百科&quot;)) {\n        // 点击\n        element.click();\n        // 等待页面加载\n        waitForPageLoaded(10);\n        // 切换到新打开的窗口\n        switchToNextWindow();\n        break;\n    }\n}\n\nfunction baiduSearch(str) {\n    open(&quot;https://www.baidu.com&quot;);\n    sendKeys(&#39;id=kw&#39;, str);\n    click(&quot;css=input[value=&#39;百度一下&#39;]&quot;);\n    waitForPageLoaded(5);\n}\n</code></pre>\n<p>更多示例请见 Demo 示例</p>\n",
          "type": "module",
          "displayName": "自动化测试示例："
        },
        {
          "textRaw": "元素 target 选择器说明：",
          "name": "元素_target_选择器说明：",
          "desc": "<p><code>id=</code>   根据 id 查找元素</p>\n<p><code>name=</code>   根据name查找元素</p>\n<p><code>xpath=</code>   根据xpath查找元素</p>\n<p><code>css=</code>   根据css查找元素</p>\n<p><code>tagName=</code>   根据tagName查找元素</p>\n<p><code>className=</code>   根据className查找元素</p>\n<p><code>linkText=</code>   根据linkText查找元素</p>\n<p>示例：</p>\n<pre><code class=\"lang-html\">&lt;div&gt;\n    &lt;span id=&quot;wd&quot;&gt;哈哈哈&lt;/span&gt;\n    &lt;span name=&quot;text&quot;&gt;嘿嘿&lt;/span&gt;\n    &lt;ul class=&quot;test_ul&quot;&gt;\n        &lt;li&gt;1&lt;/li&gt;\n        &lt;li&gt;2&lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;a href=&quot;https://www.baidu.com&quot;&gt;百度一下&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-js\">// 根据id查询\nprintln(findOne(&quot;id=wd&quot;).text()); // 输出：哈哈哈\n\n// 根据name查询\nprintln(findOne(&quot;name=text&quot;).text()); // 输出：嘿嘿\n\n// 根据xpath查询\nprintln(findOne(&quot;xpath=//div/span[1]&quot;).text()); // 输出：哈哈哈\n\n// 根据css查询\nprintln(findOne(&quot;css=div &gt; span[name=&#39;text&#39;]&quot;).text()); // 输出：嘿嘿\n\n// 根据tagName查询\nprintln(find(&quot;tagName=span&quot;)); // 输出：[&lt;span&gt;哈哈哈&lt;/span&gt;, &lt;span&gt;嘿嘿&lt;/span&gt;]\n\n// 根据className查询\nprintln(find(&quot;className=test_ul&quot;)); // 输出：[&lt;li&gt;1&lt;/li&gt;, &lt;li&gt;2&lt;/li&gt;]\n\n// 根据linkText查询\nprintln(findOne(&quot;linkText=百度一下&quot;).text()); // 输出：百度一下\n</code></pre>\n<!-- [end-include:overview.md] -->\n<!-- [start-include:qa.md] -->\n",
          "type": "module",
          "displayName": "元素 target 选择器说明："
        }
      ],
      "type": "module",
      "displayName": "综述"
    },
    {
      "textRaw": "Q & A",
      "name": "q_&_a",
      "modules": [
        {
          "textRaw": "如何启动程序",
          "name": "如何启动程序",
          "desc": "<p>首先安装 chrome 浏览器，浏览器访问 chrome://settings/help 打开关于 chrome 页面</p>\n<p>找到 chrome 版本，然后打开 <a href=\"http://npm.taobao.org/mirrors/chromedriver/\">chromedriver</a> 下载网站，找到对应版本驱动（版本号匹配要求很严格）</p>\n<p>下载对应驱动放到 C:\\data\\auto\\ 目录下（不强烈要求，可以自定义路径）</p>\n<p>修改项目下的<code>config.json</code>文件，修改浏览器驱动路径，修改以下条目：</p>\n<pre><code class=\"lang-json\">{\n    &quot;CHROME_DRIVER_PATH&quot;: &quot;C:\\\\data\\\\auto\\\\chromedriver.exe&quot;\n}\n</code></pre>\n<p>然后运行 <code>cn.veasion.auto.Development</code> 类的 main 方法即可。</p>\n",
          "type": "module",
          "displayName": "如何启动程序"
        },
        {
          "textRaw": "启动后如何运行 js 自动化脚本",
          "name": "启动后如何运行_js_自动化脚本",
          "desc": "<p>由于 Development 类没有明确指定运行文件，所以通过控制台命令运行：</p>\n<blockquote>\n<p>如运行 script 目录下 crawler.js</p>\n</blockquote>\n<pre><code>run script/crawler.js\n</code></pre><blockquote>\n<p>目录层级太多，也可以直接命令行执行（会自动匹配查找）</p>\n</blockquote>\n<pre><code>&gt; baidu.js\n</code></pre><blockquote>\n<p>重新运行该 js 命令</p>\n</blockquote>\n<pre><code>reload\n</code></pre><blockquote>\n<p>重置脚本引擎</p>\n</blockquote>\n<pre><code>reset\n</code></pre><blockquote>\n<p>运行某作者所有 js 脚本 （根据 js 文件中 @author 查找）</p>\n</blockquote>\n<pre><code>author luozhuowei\n</code></pre><blockquote>\n<p>退出</p>\n</blockquote>\n<pre><code>  exit\n</code></pre><blockquote>\n<p>直接命令行执行 js 脚本</p>\n</blockquote>\n<pre><code>open(&#39;http://www.baidu.com&#39;)\n</code></pre><blockquote>\n<p>执行多行 js 脚本</p>\n</blockquote>\n<pre><code>  &gt;&gt;&gt;\n  function hello() {\n      log.info(&quot;hello automation js&quot;)\n  }\n  &gt;&gt;&gt;\n</code></pre><blockquote>\n<p>打印已执行的历史命令</p>\n</blockquote>\n<pre><code>  // 上一条命令\n  top\n  // 前3条命令\n  top 3\n</code></pre>",
          "type": "module",
          "displayName": "启动后如何运行 js 自动化脚本"
        },
        {
          "textRaw": "如何指定运行某 js 自动化脚本",
          "name": "如何指定运行某_js_自动化脚本",
          "desc": "<p><code>cn.veasion.auto.Development</code> 类的 main 方法代码：</p>\n<pre><code class=\"lang-java\">public static void main(String[] args) throws Exception {\n    // ...省略其他代码\n\n    // 默认 script 下的脚本文件\n    String jsPath = &quot;script/crawler.js&quot;;\n\n    // 指定js文件执行\n    JavaScriptCore.execute(driver, env, new File(getFilePath(jsPath)));\n\n    // ...省略其他代码\n}\n</code></pre>\n",
          "type": "module",
          "displayName": "如何指定运行某 js 自动化脚本"
        },
        {
          "textRaw": "如何以 jar 方式运行",
          "name": "如何以_jar_方式运行",
          "desc": "<p>jar包路径 resources/automation.jar, 运行脚本路径 resources/automation.bat。</p>\n<p>安装 jdk 环境，双击 <code>automation.bat</code> 即可运行。</p>\n<!-- [end-include:qa.md] -->\n<!-- [start-include:driver.md] -->\n",
          "type": "module",
          "displayName": "如何以 jar 方式运行"
        }
      ],
      "type": "module",
      "displayName": "Q & A"
    },
    {
      "textRaw": "WebDriverBinding",
      "name": "webdriverbinding",
      "desc": "<p>driver 模块提供一系列函数，继承 SearchContextBinding 类，用于元素查找，数据库操作等。</p>\n<p>该 api 函数可以直接方法访问，如 <code>click(target)</code> 方式调用，等价于 <code>driver.click(target)</code></p>\n<p>js 脚本绑定的 java 后台类 cn.veasion.auto.bind.WebDriverBinding</p>\n",
      "methods": [
        {
          "textRaw": "open(url)",
          "type": "method",
          "name": "open",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 网址 ",
                  "name": "url",
                  "type": "string",
                  "desc": "网址"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                }
              ]
            }
          ],
          "desc": "<p>打开页面并等待页面加载</p>\n<pre><code class=\"lang-js\">open(&quot;http://www.baidu.com&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "pause(millis)",
          "type": "method",
          "name": "pause",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`millis` {number} 毫秒 ",
                  "name": "millis",
                  "type": "number",
                  "desc": "毫秒"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "millis"
                }
              ]
            }
          ],
          "desc": "<p>暂停多少毫秒，等价于 sleep</p>\n<pre><code class=\"lang-js\">pause(500);\n</code></pre>\n"
        },
        {
          "textRaw": "sleep(millis)",
          "type": "method",
          "name": "sleep",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`millis` {number} 毫秒 ",
                  "name": "millis",
                  "type": "number",
                  "desc": "毫秒"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "millis"
                }
              ]
            }
          ],
          "desc": "<p>暂停多少毫秒，等价于 pause</p>\n<pre><code class=\"lang-js\">sleep(500);\n</code></pre>\n"
        },
        {
          "textRaw": "executeScript(jsCode)",
          "type": "method",
          "name": "executeScript",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jsCode` {string} js 脚本 ",
                  "name": "jsCode",
                  "type": "string",
                  "desc": "js 脚本"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jsCode"
                }
              ]
            }
          ],
          "desc": "<p>向浏览器驱动执行 js 代码</p>\n<pre><code class=\"lang-js\">executeScript(&quot;alert(&#39;hello&#39;);&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "executeScriptByParams(jsCode, args)",
          "type": "method",
          "name": "executeScriptByParams",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jsCode` {string} js代码 ",
                  "name": "jsCode",
                  "type": "string",
                  "desc": "js代码"
                },
                {
                  "textRaw": "`args` {array?} 参数 ",
                  "name": "args",
                  "type": "array?",
                  "desc": "参数"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jsCode"
                },
                {
                  "name": "args"
                }
              ]
            }
          ],
          "desc": "<p>向浏览器驱动执行 js 代码（带参数）</p>\n<pre><code class=\"lang-js\">executeScriptByParams(&quot;arguments[0].click()&quot;, element);\n</code></pre>\n"
        },
        {
          "textRaw": "command(command)",
          "type": "method",
          "name": "command",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`command` {Object} json命令 ",
                  "name": "command",
                  "type": "Object",
                  "desc": "json命令"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "command"
                }
              ]
            }
          ],
          "desc": "<p>执行 json 命令，兼容 js 调用 json 自动化脚本</p>\n<pre><code class=\"lang-js\">command({ &quot;command&quot;: &quot;click&quot;, &quot;target&quot;: &quot;css=button&quot; });\ncommand(&#39;{ &quot;command&quot;: &quot;click&quot;, &quot;target&quot;: &quot;css=button&quot; }&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "assertResult(flag, message)",
          "type": "method",
          "name": "assertResult",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`flag` {boolean} 是否通过 ",
                  "name": "flag",
                  "type": "boolean",
                  "desc": "是否通过"
                },
                {
                  "textRaw": "`message` {string} 断言信息 ",
                  "name": "message",
                  "type": "string",
                  "desc": "断言信息"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "flag"
                },
                {
                  "name": "message"
                }
              ]
            }
          ],
          "desc": "<p>断言，当 flag 为 true 时表示断言通过，false 为断言失败抛出异常 message</p>\n<pre><code class=\"lang-js\">assertResult(true, &#39;断言测试通过&#39;);\n// 断言元素存在\nassertResult(findOne(&#39;id=xxx&#39;) != null, &#39;断言元素存在&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "waitForPageLoaded(seconds)",
          "type": "method",
          "name": "waitForPageLoaded",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`seconds` {number?} 最大等待秒数 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待秒数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待页面加载，通常在页面重新加载或刷新时使用。</p>\n<pre><code class=\"lang-js\">waitForPageLoaded(10);\n</code></pre>\n"
        },
        {
          "textRaw": "iframe(target, fun)",
          "type": "method",
          "name": "iframe",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`fun` {Function} 函数 ",
                  "name": "fun",
                  "type": "Function",
                  "desc": "函数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "fun"
                }
              ]
            }
          ],
          "desc": "<p>当前浏览器操作切换至 target 元素  iframe 框架里</p>\n<pre><code class=\"lang-js\">iframe(&#39;id=iframe&#39;, function () {\n    println(findOne(&#39;css=body&#39;).text());\n});\n</code></pre>\n"
        },
        {
          "textRaw": "formatDate(date, pattern)",
          "type": "method",
          "name": "formatDate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`date` {Object} 时间 (时间对象/毫秒数) ",
                  "name": "date",
                  "type": "Object",
                  "desc": "时间 (时间对象/毫秒数)"
                },
                {
                  "textRaw": "`pattern` {string} 格式化 format ",
                  "name": "pattern",
                  "type": "string",
                  "desc": "格式化 format"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "date"
                },
                {
                  "name": "pattern"
                }
              ]
            }
          ],
          "desc": "<p>格式化时间</p>\n<pre><code class=\"lang-js\">// 时间格式化\nformatDate(new Date(), &#39;yyyy-MM-dd HH:mm:ss&#39;);\n// 毫秒数格式化\nformatDate(1607430878907, &#39;yyyy-MM-dd HH:mm:ss&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "randCode(length)",
          "type": "method",
          "name": "randCode",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`length` {number} 长度 ",
                  "name": "length",
                  "type": "number",
                  "desc": "长度"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "length"
                }
              ]
            }
          ],
          "desc": "<p>随机字符串（数字）</p>\n<pre><code class=\"lang-js\">randCode(8);\n</code></pre>\n"
        },
        {
          "textRaw": "println(message, args)",
          "type": "method",
          "name": "println",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {Object} 消息 ",
                  "name": "message",
                  "type": "Object",
                  "desc": "消息"
                },
                {
                  "textRaw": "`args` {array?} 参数 ",
                  "name": "args",
                  "type": "array?",
                  "desc": "参数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "message"
                },
                {
                  "name": "args"
                }
              ]
            }
          ],
          "desc": "<p>打印，输出到控制台</p>\n"
        },
        {
          "textRaw": "calculate(str, n)",
          "type": "method",
          "name": "calculate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} 运算表达式 ",
                  "name": "str",
                  "type": "string",
                  "desc": "运算表达式"
                },
                {
                  "textRaw": "`n` {number} 保留几位小数 ",
                  "name": "n",
                  "type": "number",
                  "desc": "保留几位小数"
                },
                {
                  "textRaw": "{string} 返回计算结果 ",
                  "type": "string",
                  "desc": "返回计算结果"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "n"
                }
              ]
            }
          ],
          "desc": "<p>计算器</p>\n<pre><code class=\"lang-js\">// 计算，保留两位小数\nlet result = calculate(&#39;√(3*3)+4.99+(5.99+6.99)*1.06^2&#39;, 2);\nprintln(&#39;计算结果：&#39; + result);\n</code></pre>\n"
        },
        {
          "textRaw": "writeText(path, context, append, charsetName)",
          "type": "method",
          "name": "writeText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                },
                {
                  "textRaw": "`context` {string} 文本内容 ",
                  "name": "context",
                  "type": "string",
                  "desc": "文本内容"
                },
                {
                  "textRaw": "`append` {boolean} 是否追加 ",
                  "name": "append",
                  "type": "boolean",
                  "desc": "是否追加"
                },
                {
                  "textRaw": "`charsetName` {string?} 编码，默认UTF-8 ",
                  "name": "charsetName",
                  "type": "string?",
                  "desc": "编码，默认UTF-8"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "context"
                },
                {
                  "name": "append"
                },
                {
                  "name": "charsetName"
                }
              ]
            }
          ],
          "desc": "<p>写文本文件</p>\n<pre><code class=\"lang-js\">// 写文本文件\nwriteText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;hello&#39;, false);\n// 追加文本文件\nwriteText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;veasion&#39;, true);\n</code></pre>\n"
        },
        {
          "textRaw": "readText(pathOrUrl, charsetName)",
          "type": "method",
          "name": "readText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`pathOrUrl` {string} 路径或网址 ",
                  "name": "pathOrUrl",
                  "type": "string",
                  "desc": "路径或网址"
                },
                {
                  "textRaw": "`charsetName` {string?} 编码，默认UTF-8 ",
                  "name": "charsetName",
                  "type": "string?",
                  "desc": "编码，默认UTF-8"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "pathOrUrl"
                },
                {
                  "name": "charsetName"
                }
              ]
            }
          ],
          "desc": "<p>读取文本，可以读本地文本文件和网络文本</p>\n<pre><code class=\"lang-js\">// 读取网络文本\nreadText(&#39;http://www.baidu.com&#39;, &#39;utf-8&#39;);\n// 读取本地文本文件\nreadText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;utf-8&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "runNewJs(path)",
          "type": "method",
          "name": "runNewJs",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>在一个新的环境运行 js 脚本</p>\n<pre><code class=\"lang-js\">// 相对路径\nrunNewJs(env.getSourcePath(&#39;/demo/demo.js&#39;));\n// 绝对路径\nrunNewJs(&#39;D:\\Veasion\\projects\\\\automation_testing\\src\\main\\resources\\demo\\demo.js&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "screenshot(path)",
          "type": "method",
          "name": "screenshot",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 图片存放路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "图片存放路径"
                },
                {
                  "textRaw": "{boolean} ",
                  "type": "boolean"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>浏览器截图并保存到指定位置</p>\n<pre><code class=\"lang-js\">screenshot(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\temp.png&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "getWindowHandle()",
          "type": "method",
          "name": "getWindowHandle",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取当前窗口句柄</p>\n"
        },
        {
          "textRaw": "openNewWindow()",
          "type": "method",
          "name": "openNewWindow",
          "desc": "<p>打开并切换到新的窗口</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "withNewWindow(fun)",
          "type": "method",
          "name": "withNewWindow",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fun` {Function} 方法 ",
                  "name": "fun",
                  "type": "Function",
                  "desc": "方法"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fun"
                }
              ]
            }
          ],
          "desc": "<p>在新的窗口中执行函数</p>\n<pre><code class=\"lang-js\">// 新窗口执行代码\nwithNewWindow(function () {\n    open(&#39;http://www.baidu.com&#39;);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "switchToNextWindow(windowHandle)",
          "type": "method",
          "name": "switchToNextWindow",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`windowHandle` {string} 指定窗口句柄，为 null 则切换为下一个窗口 ",
                  "name": "windowHandle",
                  "type": "string",
                  "desc": "指定窗口句柄，为 null 则切换为下一个窗口"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "windowHandle"
                }
              ]
            }
          ],
          "desc": "<p>切换窗口</p>\n<pre><code class=\"lang-js\">// 获取当前窗口句柄\nlet currentHandle = getWindowHandle();\n// 切换下一个窗口\nswitchToNextWindow();\n// 切换到指定窗口\nswitchToNextWindow(currentHandle);\n</code></pre>\n"
        },
        {
          "textRaw": "createJdbcConnection(jdbcUrl, user, password)",
          "type": "method",
          "name": "createJdbcConnection",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jdbcUrl` {string} 数据库jdbc连接url ",
                  "name": "jdbcUrl",
                  "type": "string",
                  "desc": "数据库jdbc连接url"
                },
                {
                  "textRaw": "`user` {string} 数据库用户名 ",
                  "name": "user",
                  "type": "string",
                  "desc": "数据库用户名"
                },
                {
                  "textRaw": "`password` {string} 数据库密码 ",
                  "name": "password",
                  "type": "string",
                  "desc": "数据库密码"
                },
                {
                  "textRaw": "{JdbcConnectionBinding} ",
                  "type": "JdbcConnectionBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jdbcUrl"
                },
                {
                  "name": "user"
                },
                {
                  "name": "password"
                }
              ]
            }
          ],
          "desc": "<p>数据库连接，操作数据库</p>\n<pre><code class=\"lang-js\">// 创建连接\nlet db = createJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n// 查询列表\ndb.query(&#39;select id, user_name, sex from t_user where status = ? limit ?&#39;, [1, 10]);\n// 查询单个\ndb.queryOnly(&#39;select database()&#39;, null);\n// 新增\ndb.insert(&#39;insert into t_user(user_name, sex) values (?, ?)&#39;, [&#39;veasion&#39;, &#39;男&#39;]);\n// 修改\ndb.update(&#39;update t_user set user_name = ? where id = ?&#39;, [&#39;xxx&#39;, 1]);\n// 关闭连接\ndb.close();\n</code></pre>\n"
        },
        {
          "textRaw": "createMysqlConnection(ip, port, database, user, password)",
          "type": "method",
          "name": "createMysqlConnection",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`ip` {string} 数据库ip地址 ",
                  "name": "ip",
                  "type": "string",
                  "desc": "数据库ip地址"
                },
                {
                  "textRaw": "`port` {number} 数据库端口 ",
                  "name": "port",
                  "type": "number",
                  "desc": "数据库端口"
                },
                {
                  "textRaw": "`database` {string} 数据库 ",
                  "name": "database",
                  "type": "string",
                  "desc": "数据库"
                },
                {
                  "textRaw": "`user` {string} 数据库用户名 ",
                  "name": "user",
                  "type": "string",
                  "desc": "数据库用户名"
                },
                {
                  "textRaw": "`password` {string} 数据库密码 ",
                  "name": "password",
                  "type": "string",
                  "desc": "数据库密码"
                },
                {
                  "textRaw": "{JdbcConnectionBinding} ",
                  "type": "JdbcConnectionBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "ip"
                },
                {
                  "name": "port"
                },
                {
                  "name": "database"
                },
                {
                  "name": "user"
                },
                {
                  "name": "password"
                }
              ]
            }
          ],
          "desc": "<p>mysql 数据库连接，操作 mysql 数据库</p>\n<pre><code class=\"lang-js\">// mysql 数据库连接\ncreateMysqlConnection(&#39;127.0.0.1&#39;, 3306, &#39;user&#39;, &#39;root&#39;, &#39;123456&#39;);\n// 等价于\ncreateJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "request(url, method, content, headers)",
          "type": "method",
          "name": "request",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求url/uri ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求url/uri"
                },
                {
                  "textRaw": "`method` {string?} 请求方式 POST/GET 默认GET ",
                  "name": "method",
                  "type": "string?",
                  "desc": "请求方式 POST/GET 默认GET"
                },
                {
                  "textRaw": "`content` {Object?} 请求body内容 ",
                  "name": "content",
                  "type": "Object?",
                  "desc": "请求body内容"
                },
                {
                  "textRaw": "`headers` {Object?} 请求头 ",
                  "name": "headers",
                  "type": "Object?",
                  "desc": "请求头"
                },
                {
                  "textRaw": "{Object} ",
                  "options": [
                    {
                      "textRaw": "`status`{number} 请求状态，正常 200 ",
                      "name": "status",
                      "type": "number",
                      "desc": "请求状态，正常 200"
                    },
                    {
                      "textRaw": "`success` {boolean} 请求是否成功 ",
                      "name": "success",
                      "type": "boolean",
                      "desc": "请求是否成功"
                    },
                    {
                      "textRaw": "`data` {string} 返回数据，response ",
                      "name": "data",
                      "type": "string",
                      "desc": "返回数据，response"
                    },
                    {
                      "textRaw": "`headers` {Object} 返回 headers ",
                      "name": "headers",
                      "type": "Object",
                      "desc": "返回 headers"
                    },
                    {
                      "textRaw": "`targetHost` {string} 目标服务器ip地址 ",
                      "name": "targetHost",
                      "type": "string",
                      "desc": "目标服务器ip地址"
                    }
                  ],
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "method"
                },
                {
                  "name": "content"
                },
                {
                  "name": "headers"
                }
              ]
            }
          ],
          "desc": "<p>http 请求，请求 XHR 接口</p>\n<pre><code class=\"lang-js\">// GET请求\nlet getResp = request(&#39;http://www.baidu.com&#39;, &#39;GET&#39;);\nif (getResp.success) {\n    log.info(&#39;请求成功：&#39; + getResp.data);\n} else {\n    log.error(&quot;请求失败，status: &quot; + getResp.status);\n}\n\n// POST请求\nlet postResp = request(&#39;/api/ouser-web/mobileLogin/login.do&#39;, &#39;POST&#39;, { username: &#39;superadmin&#39;, password: &#39;123456&#39;}, { &#39;Content-Type&#39;: &#39;application/json;charset=UTF-8&#39; });\nif (postResp.success) {\n    log.info(&#39;请求成功：&#39; + JSON.parse(postResp.data));\n} else {\n    log.error(&quot;请求失败，status: &quot; + postResp.status);\n}\n</code></pre>\n<!-- [end-include:driver.md] -->\n<!-- [start-include:element.md] -->\n"
        }
      ],
      "modules": [
        {
          "textRaw": "info",
          "name": "info",
          "desc": "<ul>\n<li>{string}</li>\n</ul>\n<p>获取当前脚本环境信息。</p>\n",
          "type": "module",
          "displayName": "info"
        }
      ],
      "type": "module",
      "displayName": "WebDriverBinding"
    },
    {
      "textRaw": "WebElementBinding",
      "name": "webelementbinding",
      "desc": "<p>element 对象，继承 SearchContextBinding 类，提供一系列元素操作方法。</p>\n<p>该 api 函数同元素对象访问，不能直接访问，如 <code>let element = findOne(target)</code> 方式获取元素对象，然后调用函数方法 <code>element.click()</code>，等价于 <code>findOne(target).click()</code></p>\n<p>js 脚本绑定的 java 后台类 cn.veasion.auto.bind.WebElementBinding</p>\n",
      "methods": [
        {
          "textRaw": "click()",
          "type": "method",
          "name": "click",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>元素点击</p>\n<pre><code class=\"lang-js\">let element = findOne(&#39;id=xxx&#39;);\nelement.click();\n</code></pre>\n"
        },
        {
          "textRaw": "tryClick()",
          "type": "method",
          "name": "tryClick",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>点击这个元素区域 ( try 点击，如果失败不会抛出异常 )<br>\n该点击函数跟 click 区别是：<br>\nclick 只能点击可见并且可以点击的元素<br>\ntryClick 能点击所有元素，包含不可见元素</p>\n<pre><code class=\"lang-js\">element.tryClick();\n</code></pre>\n"
        },
        {
          "textRaw": "attr(attr)",
          "type": "method",
          "name": "attr",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`attr` {string} 属性名称 ",
                  "name": "attr",
                  "type": "string",
                  "desc": "属性名称"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "attr"
                }
              ]
            }
          ],
          "desc": "<p>获取元素属性</p>\n<pre><code class=\"lang-js\">element.attr(&#39;name&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "type(key)",
          "type": "method",
          "name": "type",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {Object} 字符串/按键 ",
                  "name": "key",
                  "type": "Object",
                  "desc": "字符串/按键"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>向元素发送文字/模拟按键（同 sendKeys 函数）</p>\n<pre><code class=\"lang-js\">element.type(&#39;你好&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "sendKeys(key)",
          "type": "method",
          "name": "sendKeys",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {Object} 字符串/按键 ",
                  "name": "key",
                  "type": "Object",
                  "desc": "字符串/按键"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>向元素发送文字/模拟按键（同 type 函数）</p>\n<pre><code class=\"lang-js\">element.sendKeys(&#39;你好&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "text()",
          "type": "method",
          "name": "text",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取元素文本</p>\n"
        },
        {
          "textRaw": "scrollToCenter()",
          "type": "method",
          "name": "scrollToCenter",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>滚动到目标元素</p>\n"
        },
        {
          "textRaw": "innerHtml()",
          "type": "method",
          "name": "innerHtml",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取元素 inner  html 代码</p>\n"
        },
        {
          "textRaw": "outerHtml()",
          "type": "method",
          "name": "outerHtml",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取元素 outer  html 代码</p>\n"
        },
        {
          "textRaw": "value()",
          "type": "method",
          "name": "value",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取值。如 input 元素的 value 属性</p>\n<pre><code class=\"lang-js\">findOne(&quot;css=input&quot;).value();\n</code></pre>\n"
        },
        {
          "textRaw": "xpath()",
          "type": "method",
          "name": "xpath",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取元素 xpath</p>\n"
        },
        {
          "textRaw": "clear()",
          "type": "method",
          "name": "clear",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>清空值。如清空 input 元素的 value 属性</p>\n<pre><code class=\"lang-js\">findOne(&quot;css=input&quot;).clear();\n// 等价于\nfindOne(&quot;css=input&quot;).setValue(&#39;&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "setValue(text)",
          "type": "method",
          "name": "setValue",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`text` {string} 字符串 ",
                  "name": "text",
                  "type": "string",
                  "desc": "字符串"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "text"
                }
              ]
            }
          ],
          "desc": "<p>设置值。如设置 input 元素的 value 属性</p>\n<pre><code class=\"lang-js\">findOne(&quot;css=input&quot;).setValue(&#39;hello~&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "selectByLabel(value)",
          "type": "method",
          "name": "selectByLabel",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>通过 label 选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nfindOne(&quot;css=select&quot;).selectByLabel(&#39;小红&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "selectByValue(value)",
          "type": "method",
          "name": "selectByValue",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>通过 value 选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nfindOne(&quot;css=select&quot;).selectByValue(&#39;2&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "select(label, value)",
          "type": "method",
          "name": "select",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`label` {string} 选择模式，支持:  index, label, value ",
                  "name": "label",
                  "type": "string",
                  "desc": "选择模式，支持:  index, label, value"
                },
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "label"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nfindOne(&quot;css=select&quot;).select(&#39;index&#39;, 1); // 根据下标\nfindOne(&quot;css=select&quot;).select(&#39;label&#39;, &#39;小红&#39;); // 根据 label\nfindOne(&quot;css=select&quot;).select(&#39;value&#39;, &#39;2&#39;); // 根据 value\n</code></pre>\n"
        },
        {
          "textRaw": "parent()",
          "type": "method",
          "name": "parent",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取父元素</p>\n"
        },
        {
          "textRaw": "parentByTag(tagName)",
          "type": "method",
          "name": "parentByTag",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`tagName` {string} 元素 tagName ",
                  "name": "tagName",
                  "type": "string",
                  "desc": "元素 tagName"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "tagName"
                }
              ]
            }
          ],
          "desc": "<p>获取指定 tagName 的父元素（向上迭代找指定 tagName 的元素）</p>\n<pre><code class=\"lang-js\">element.parentByTag(&quot;html&quot;); // 顶层 html\n</code></pre>\n"
        },
        {
          "textRaw": "childList()",
          "type": "method",
          "name": "childList",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>子元素集合</p>\n<pre><code class=\"lang-js\">let childs = element.childList();\nfor (let i in childs) {\n    println(childs[i]);\n}\n</code></pre>\n"
        },
        {
          "textRaw": "leftSibling()",
          "type": "method",
          "name": "leftSibling",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>左边兄弟节点集合</p>\n<pre><code class=\"lang-js\">// &lt;div&gt;\n//     &lt;span&gt;小明&lt;/span&gt;\n//     &lt;span id=&quot;xiaohong&quot;&gt;小红&lt;/span&gt;\n//     &lt;span&gt;小李&lt;/span&gt;\n// &lt;/div&gt;\n\nlet element = findOne(&quot;id=xiaohong&quot;);\nelement.leftSibling(); // [&lt;span&gt;小明&lt;/span&gt;]\n</code></pre>\n"
        },
        {
          "textRaw": "rightSibling()",
          "type": "method",
          "name": "rightSibling",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>右边兄弟节点集合</p>\n<pre><code class=\"lang-js\">// &lt;div&gt;\n//     &lt;span&gt;小明&lt;/span&gt;\n//     &lt;span id=&quot;xiaohong&quot;&gt;小红&lt;/span&gt;\n//     &lt;span&gt;小李&lt;/span&gt;\n// &lt;/div&gt;\n\nlet element = findOne(&quot;id=xiaohong&quot;);\nelement.rightSibling(); // [&lt;span&gt;小李&lt;/span&gt;]\n</code></pre>\n"
        },
        {
          "textRaw": "findText(tagName, text)",
          "type": "method",
          "name": "findText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`tagName` {string} 元素 tagName，默认 * 所有 ",
                  "name": "tagName",
                  "type": "string",
                  "desc": "元素 tagName，默认 * 所有"
                },
                {
                  "textRaw": "`text` {string} 文本 ",
                  "name": "text",
                  "type": "string",
                  "desc": "文本"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "tagName"
                },
                {
                  "name": "text"
                }
              ]
            }
          ],
          "desc": "<p>查找元素包含某文字的节点</p>\n<pre><code class=\"lang-js\">// &lt;div&gt;\n//     &lt;span&gt;小明&lt;/span&gt;\n//     &lt;span&gt;小红&lt;/span&gt;\n//     &lt;span&gt;小李&lt;/span&gt;\n// &lt;/div&gt;\n\nlet element = findOne(&quot;css=div&quot;);\nelement.findText(&quot;span&quot;, &quot;小红&quot;); // &lt;span&gt;小红&lt;/span&gt;\nelement.findText(&quot;*&quot;, &quot;小红&quot;); // &lt;span&gt;小红&lt;/span&gt;\nelement.findText(null, &quot;小红&quot;); // &lt;span&gt;小红&lt;/span&gt;\n</code></pre>\n"
        },
        {
          "textRaw": "tagName()",
          "type": "method",
          "name": "tagName",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>元素 tagName，如 div/span/input 等</p>\n"
        },
        {
          "textRaw": "isDisplayed()",
          "type": "method",
          "name": "isDisplayed",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{boolean} ",
                  "type": "boolean"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>元素是否可见</p>\n"
        },
        {
          "textRaw": "touch()",
          "type": "method",
          "name": "touch",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>触摸操作，返回元素触摸对象</p>\n"
        },
        {
          "textRaw": "show()",
          "type": "method",
          "name": "show",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>页面上突出显示</p>\n<!-- [end-include:element.md] -->\n<!-- [start-include:element_ext.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "WebElementBinding"
    },
    {
      "textRaw": "SearchContextBinding",
      "name": "searchcontextbinding",
      "desc": "<p>WebDriverBinding 跟 WebElementBinding 对象都继承该对象，可以直接访问该类所有函数。</p>\n<p>该类所有方法均可以直接访问，或者通过元素对象访问（元素对象访问时，target 基于元素查找）</p>\n",
      "methods": [
        {
          "textRaw": "findOne(target)",
          "type": "method",
          "name": "findOne",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>查找一个元素</p>\n"
        },
        {
          "textRaw": "find(target)",
          "type": "method",
          "name": "find",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>查找多个元素</p>\n"
        },
        {
          "textRaw": "findList(targets)",
          "type": "method",
          "name": "findList",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`targets` {string[]} 元素选择器数组 ",
                  "name": "targets",
                  "type": "string[]",
                  "desc": "元素选择器数组"
                },
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "targets"
                }
              ]
            }
          ],
          "desc": "<p>查找多个元素</p>\n"
        },
        {
          "textRaw": "findDisplayed(target)",
          "type": "method",
          "name": "findDisplayed",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>查找多个可见元素</p>\n"
        },
        {
          "textRaw": "findText(tagName, text, fuzzyMatches)",
          "type": "method",
          "name": "findText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`tagName` {string} 元素 tagName，默认 * 所有 ",
                  "name": "tagName",
                  "type": "string",
                  "desc": "元素 tagName，默认 * 所有"
                },
                {
                  "textRaw": "`text` {string} 文本 ",
                  "name": "text",
                  "type": "string",
                  "desc": "文本"
                },
                {
                  "textRaw": "`fuzzyMatches` {boolean} 是否模糊匹配 ",
                  "name": "fuzzyMatches",
                  "type": "boolean",
                  "desc": "是否模糊匹配"
                },
                {
                  "textRaw": "{WebElementBinding} ",
                  "type": "WebElementBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "tagName"
                },
                {
                  "name": "text"
                },
                {
                  "name": "fuzzyMatches"
                }
              ]
            }
          ],
          "desc": "<p>查找元素包含某文字的节点</p>\n<pre><code class=\"lang-js\">// &lt;div&gt;\n//     &lt;span&gt;小明&lt;/span&gt;\n//     &lt;span&gt;小红&lt;/span&gt;\n//     &lt;span&gt;小李&lt;/span&gt;\n// &lt;/div&gt;\n\n// 精确匹配\nfindText(&quot;span&quot;, &quot;小红&quot;, false); // &lt;span&gt;小红&lt;/span&gt;\n// 模糊匹配\nfindText(&quot;span&quot;, &quot;红&quot;, true); // &lt;span&gt;小红&lt;/span&gt;\n</code></pre>\n"
        },
        {
          "textRaw": "findTextAll(tagName, text, fuzzyMatches)",
          "type": "method",
          "name": "findTextAll",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`tagName` {string} 元素 tagName，默认 * 所有 ",
                  "name": "tagName",
                  "type": "string",
                  "desc": "元素 tagName，默认 * 所有"
                },
                {
                  "textRaw": "`text` {string} 文本 ",
                  "name": "text",
                  "type": "string",
                  "desc": "文本"
                },
                {
                  "textRaw": "`fuzzyMatches` {boolean} 是否模糊匹配 ",
                  "name": "fuzzyMatches",
                  "type": "boolean",
                  "desc": "是否模糊匹配"
                },
                {
                  "textRaw": "{WebElementBinding[]} ",
                  "type": "WebElementBinding[]"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "tagName"
                },
                {
                  "name": "text"
                },
                {
                  "name": "fuzzyMatches"
                }
              ]
            }
          ],
          "desc": "<p>查找元素包含某文字的节点</p>\n<pre><code class=\"lang-js\">// &lt;div&gt;\n//     &lt;span&gt;小明&lt;/span&gt;\n//     &lt;span&gt;小红&lt;/span&gt;\n//     &lt;span&gt;小李&lt;/span&gt;\n// &lt;/div&gt;\n\n// 精确匹配\nfindTextAll(&quot;span&quot;, &quot;小红&quot;, false); // [&lt;span&gt;小红&lt;/span&gt;]\n// 模糊匹配\nfindTextAll(&quot;span&quot;, &quot;小&quot;, true); // [&lt;span&gt;小明&lt;/span&gt;, &lt;span&gt;小红&lt;/span&gt;, &lt;span&gt;小李&lt;/span&gt;]\n</code></pre>\n"
        },
        {
          "textRaw": "click(target)",
          "type": "method",
          "name": "click",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>点击元素</p>\n<pre><code class=\"lang-js\">click(&quot;id=xxx&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "tryClick(target)",
          "type": "method",
          "name": "tryClick",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>点击这个元素区域 ( try 点击，如果失败不会抛出异常 )<br>\n该点击函数跟 click 区别是：<br>\nclick 只能点击可见并且可以点击的元素<br>\ntryClick 能点击所有元素，包含不可见元素</p>\n<pre><code class=\"lang-js\">tryClick(&quot;id=xxx&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "attr(target, attr)",
          "type": "method",
          "name": "attr",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`attr` {string} 属性名称 ",
                  "name": "attr",
                  "type": "string",
                  "desc": "属性名称"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "attr"
                }
              ]
            }
          ],
          "desc": "<p>获取元素属性</p>\n<pre><code class=\"lang-js\">attr(&#39;css=input&#39;, &quot;value&quot;); // 获取input标签的value属性\n</code></pre>\n"
        },
        {
          "textRaw": "text(target)",
          "type": "method",
          "name": "text",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>获取元素文本</p>\n"
        },
        {
          "textRaw": "type(target, key)",
          "type": "method",
          "name": "type",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`key` {Object} 字符串/按键 ",
                  "name": "key",
                  "type": "Object",
                  "desc": "字符串/按键"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>向元素发送文字/模拟按键（同 sendKeys 函数）</p>\n<pre><code class=\"lang-js\">type(&#39;css=input&#39;, &#39;你好&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "sendKeys(target, key)",
          "type": "method",
          "name": "sendKeys",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`key` {Object} 字符串/按键 ",
                  "name": "key",
                  "type": "Object",
                  "desc": "字符串/按键"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>向元素发送文字/模拟按键（同 type 函数）</p>\n<pre><code class=\"lang-js\">sendKeys(&#39;css=input&#39;, &#39;你好&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "mouseOver(target)",
          "type": "method",
          "name": "mouseOver",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>鼠标移动到目标元素</p>\n"
        },
        {
          "textRaw": "scrollToCenter(target)",
          "type": "method",
          "name": "scrollToCenter",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                }
              ]
            }
          ],
          "desc": "<p>滚动到目标元素</p>\n"
        },
        {
          "textRaw": "selectByLabel(target, value)",
          "type": "method",
          "name": "selectByLabel",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>通过 label 选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nselectByLabel(&#39;css=select&#39;, &#39;小红&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "selectByValue(target, value)",
          "type": "method",
          "name": "selectByValue",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>通过 value 选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nselectByValue(&#39;css=select&#39;, &#39;2&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "select(target, label, value)",
          "type": "method",
          "name": "select",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`label` {string} 选择模式，支持:  index, label, value ",
                  "name": "label",
                  "type": "string",
                  "desc": "选择模式，支持:  index, label, value"
                },
                {
                  "textRaw": "`value` {Object} 选中值 ",
                  "name": "value",
                  "type": "Object",
                  "desc": "选中值"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "label"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>选择下拉框</p>\n<pre><code class=\"lang-js\">// &lt;select&gt;\n//   &lt;option value=&quot;1&quot;&gt;小明&lt;/option&gt;\n//   &lt;option value=&quot;2&quot;&gt;小红&lt;/option&gt;\n//   &lt;option value=&quot;3&quot;&gt;小李&lt;/option&gt;\n// &lt;/select&gt;\n\n// 选择小红\nselect(&#39;css=select&#39;, &#39;index&#39;, 1); // 根据下标\nselect(&#39;css=select&#39;, &#39;label&#39;, &#39;小红&#39;); // 根据 label\nselect(&#39;css=select&#39;, &#39;value&#39;, &#39;2&#39;); // 根据 value\n</code></pre>\n"
        },
        {
          "textRaw": "waitForElementDisplayed(target, seconds)",
          "type": "method",
          "name": "waitForElementDisplayed",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`seconds` {number?} 最大等待多少秒 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待多少秒"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待元素显示（可见）</p>\n"
        },
        {
          "textRaw": "waitForElementNotDisplayed(target, seconds)",
          "type": "method",
          "name": "waitForElementNotDisplayed",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`seconds` {number?} 最大等待多少秒 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待多少秒"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待元素隐藏（不可见）</p>\n"
        },
        {
          "textRaw": "waitForElementPresent(target, seconds)",
          "type": "method",
          "name": "waitForElementPresent",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`seconds` {number?} 最大等待多少秒 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待多少秒"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待元素出现</p>\n"
        },
        {
          "textRaw": "waitForElementNotPresent(target, seconds)",
          "type": "method",
          "name": "waitForElementNotPresent",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`seconds` {number?} 最大等待多少秒 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待多少秒"
                },
                {
                  "textRaw": "{SearchContextBinding} ",
                  "type": "SearchContextBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待元素消失</p>\n<!-- [end-include:element_ext.md] -->\n<!-- [start-include:env.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "SearchContextBinding"
    },
    {
      "textRaw": "EnvironmentBinding",
      "name": "environmentbinding",
      "desc": "<p>该类用来操作环境变量，可以直接通过 env 访问。</p>\n<p>配置文件 <code>config.json</code> 中的配置会默认加载到 env 全局变量中，可以直接获取，如 <code>env.getString(&#39;USER_NAME&#39;)</code></p>\n",
      "methods": [
        {
          "textRaw": "put(key, value)",
          "type": "method",
          "name": "put",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                },
                {
                  "textRaw": "`value` {string} value ",
                  "name": "value",
                  "type": "string",
                  "desc": "value"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>存储变量 (当前脚本运行环境，非全局)</p>\n"
        },
        {
          "textRaw": "putGlobal(key, value)",
          "type": "method",
          "name": "putGlobal",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                },
                {
                  "textRaw": "`value` {string} value ",
                  "name": "value",
                  "type": "string",
                  "desc": "value"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "value"
                }
              ]
            }
          ],
          "desc": "<p>存储全局变量</p>\n"
        },
        {
          "textRaw": "get(key)",
          "type": "method",
          "name": "get",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>获取变量</p>\n"
        },
        {
          "textRaw": "getString(key)",
          "type": "method",
          "name": "getString",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>获取变量</p>\n"
        },
        {
          "textRaw": "getOrDefault(key, defaultVal)",
          "type": "method",
          "name": "getOrDefault",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                },
                {
                  "textRaw": "`defaultVal` {Object} defaultVal 默认值（取不到数据时返回该值） ",
                  "name": "defaultVal",
                  "type": "Object",
                  "desc": "defaultVal 默认值（取不到数据时返回该值）"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                },
                {
                  "name": "defaultVal"
                }
              ]
            }
          ],
          "desc": "<p>获取变量</p>\n"
        },
        {
          "textRaw": "remove(key)",
          "type": "method",
          "name": "remove",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`key` {string} key ",
                  "name": "key",
                  "type": "string",
                  "desc": "key"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "key"
                }
              ]
            }
          ],
          "desc": "<p>移除当前变量 （本地变量，非全局）</p>\n"
        },
        {
          "textRaw": "translate(str)",
          "type": "method",
          "name": "translate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} 表达式 ",
                  "name": "str",
                  "type": "string",
                  "desc": "表达式"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                }
              ]
            }
          ],
          "desc": "<p>解析表达式</p>\n<pre><code class=\"lang-js\">env.put(&quot;name&quot;, &quot;veasion&quot;);\nenv.translate(&quot;hello ${name}&quot;); // hello veasion\n</code></pre>\n"
        },
        {
          "textRaw": "translate(str, object)",
          "type": "method",
          "name": "translate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} 表达式 ",
                  "name": "str",
                  "type": "string",
                  "desc": "表达式"
                },
                {
                  "textRaw": "`object` {Object} 对象 ",
                  "name": "object",
                  "type": "Object",
                  "desc": "对象"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "object"
                }
              ]
            }
          ],
          "desc": "<p>解析表达式</p>\n<pre><code class=\"lang-js\">env.translate(&quot;hello ${name}&quot;, { name: &#39;veasion&#39; }); // hello veasion\n</code></pre>\n"
        },
        {
          "textRaw": "getPath(path)",
          "type": "method",
          "name": "getPath",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>获取class决定路径</p>\n<pre><code class=\"lang-js\">// 如代码在 D:\\projects\\automation_testing 运行\nenv.getPath(&#39;/common/proxy.js&#39;); // D:\\projects\\automation_testing\\target\\classes\\common\\proxy.js\n</code></pre>\n"
        },
        {
          "textRaw": "getSourcePath(path)",
          "type": "method",
          "name": "getSourcePath",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>获取源文件绝对路径</p>\n<pre><code class=\"lang-js\">// 如代码在 D:\\projects\\automation_testing 运行\nenv.getSourcePath(&#39;/common/proxy.js&#39;); // D:\\projects\\automation_testing\\src\\main\\resources\\common\\proxy.js\n</code></pre>\n"
        }
      ],
      "type": "module",
      "displayName": "EnvironmentBinding"
    },
    {
      "textRaw": "获取常用按键 KEY",
      "name": "获取常用按键_key",
      "desc": "<p>env 可以直接获取常用按键，如回车按键 <code>env.get(&#39;KEY_ENTER&#39;)</code></p>\n<p>支持以下按键获取：</p>\n<p><code>KEY_BACK_SPACE</code>\n<code>KEY_TAB</code>\n<code>KEY_ENTER</code>\n<code>KEY_SHIFT</code>\n<code>KEY_CONTROL</code>\n<code>KEY_ALT</code>\n<code>KEY_ESCAPE</code>\n<code>KEY_PAGE_UP</code>\n<code>KEY_PAGE_DOWN</code>\n<code>KEY_END</code>\n<code>KEY_HOME</code>\n<code>KEY_ARROW_LEFT</code>\n<code>KEY_ARROW_UP</code>\n<code>KEY_ARROW_RIGHT</code>\n<code>KEY_ARROW_DOWN</code>\n<code>KEY_F12</code></p>\n<!-- [end-include:env.md] -->\n<!-- [start-include:jdbc.md] -->\n",
      "type": "module",
      "displayName": "获取常用按键 KEY"
    },
    {
      "textRaw": "JdbcConnectionBinding",
      "name": "jdbcconnectionbinding",
      "desc": "<p>提供数据库操作，对象通过 WebDriverBinding 中的 <code>createJdbcConnection</code> 或 <code>createMysqlConnection</code> 方法创建。</p>\n",
      "methods": [
        {
          "textRaw": "query(sql, params)",
          "type": "method",
          "name": "query",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sql` {string} SQL ",
                  "name": "sql",
                  "type": "string",
                  "desc": "SQL"
                },
                {
                  "textRaw": "`params` {Object[]} 参数 ",
                  "name": "params",
                  "type": "Object[]",
                  "desc": "参数"
                },
                {
                  "textRaw": "{Object[]} 返回查询结果列表 ",
                  "type": "Object[]",
                  "desc": "返回查询结果列表"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sql"
                },
                {
                  "name": "params"
                }
              ]
            }
          ],
          "desc": "<p>列表查询</p>\n<pre><code class=\"lang-js\">// 连接数据库\nlet db = createMysqlConnection(&#39;127.0.0.1&#39;, 3306, &#39;user&#39;, &#39;root&#39;, &#39;123456&#39;);\n// db = createJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n\n// 查询\nlet list = db.query(&#39;select id, user_name, sex from t_user where status = ? limit ?&#39;, [1, 10]);\n\nfor (let i in list) {\n    println(list[i]); // { id: 1, userName: &#39;xxx&#39; }\n}\n\ndb.close();\n</code></pre>\n"
        },
        {
          "textRaw": "queryOnly(sql, params)",
          "type": "method",
          "name": "queryOnly",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sql` {string} SQL ",
                  "name": "sql",
                  "type": "string",
                  "desc": "SQL"
                },
                {
                  "textRaw": "`params` {Object[]} 参数 ",
                  "name": "params",
                  "type": "Object[]",
                  "desc": "参数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sql"
                },
                {
                  "name": "params"
                }
              ]
            }
          ],
          "desc": "<p>获取单个值</p>\n<pre><code class=\"lang-js\">// 连接数据库\nlet db = createMysqlConnection(&#39;127.0.0.1&#39;, 3306, &#39;user&#39;, &#39;root&#39;, &#39;123456&#39;);\n// db = createJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n\ndb.queryOnly(&#39;select database()&#39;, null); // user\n\ndb.close();\n</code></pre>\n"
        },
        {
          "textRaw": "update(sql, params)",
          "type": "method",
          "name": "update",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sql` {string} SQL ",
                  "name": "sql",
                  "type": "string",
                  "desc": "SQL"
                },
                {
                  "textRaw": "`params` {Object[]} 参数 ",
                  "name": "params",
                  "type": "Object[]",
                  "desc": "参数"
                },
                {
                  "textRaw": "{number} 返回影响条数 ",
                  "type": "number",
                  "desc": "返回影响条数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sql"
                },
                {
                  "name": "params"
                }
              ]
            }
          ],
          "desc": "<p>执行增删改</p>\n<pre><code class=\"lang-js\">db.update(&#39;update t_user set user_name = ? where id = ?&#39;, [&#39;xxx&#39;, 1]);\n</code></pre>\n"
        },
        {
          "textRaw": "insert(sql, params)",
          "type": "method",
          "name": "insert",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sql` {string} SQL ",
                  "name": "sql",
                  "type": "string",
                  "desc": "SQL"
                },
                {
                  "textRaw": "`params` {Object[]} 参数 ",
                  "name": "params",
                  "type": "Object[]",
                  "desc": "参数"
                },
                {
                  "textRaw": "{number} 自增ID，无则返回空 ",
                  "type": "number",
                  "desc": "自增ID，无则返回空"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sql"
                },
                {
                  "name": "params"
                }
              ]
            }
          ],
          "desc": "<p>执行新增，返回自增长id</p>\n<pre><code class=\"lang-js\">db.insert(&#39;insert into t_user(user_name, sex) values (?, ?)&#39;, [&#39;veasion&#39;, &#39;男&#39;]);\n</code></pre>\n"
        },
        {
          "textRaw": "executeDDL(sql)",
          "type": "method",
          "name": "executeDDL",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`sql` {string} SQL ",
                  "name": "sql",
                  "type": "string",
                  "desc": "SQL"
                },
                {
                  "textRaw": "{number} 返回影响条数 ",
                  "type": "number",
                  "desc": "返回影响条数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "sql"
                }
              ]
            }
          ],
          "desc": "<p>执行DDL</p>\n<pre><code class=\"lang-js\">db.executeDDL(&quot;alter table t_user modify `name` varchar(255) not null comment &#39;名称&#39;;&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "close()",
          "type": "method",
          "name": "close",
          "desc": "<p>关闭连接</p>\n<!-- [end-include:jdbc.md] -->\n<!-- [start-include:touch.md] -->\n",
          "signatures": [
            {
              "params": []
            }
          ]
        }
      ],
      "type": "module",
      "displayName": "JdbcConnectionBinding"
    },
    {
      "textRaw": "TouchActionsBinding",
      "name": "touchactionsbinding",
      "desc": "<p>该类用来操作复杂的手势，如元素滚动，元素移动等，对象通过 <code>element.touch()</code> 获取。\n目前兼容性差，建议使用 js 自行扩展。</p>\n",
      "methods": [
        {
          "textRaw": "click()",
          "type": "method",
          "name": "click",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>点击</p>\n"
        },
        {
          "textRaw": "doubleClick()",
          "type": "method",
          "name": "doubleClick",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>双击</p>\n"
        },
        {
          "textRaw": "singleTap()",
          "type": "method",
          "name": "singleTap",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>单次触摸点击</p>\n"
        },
        {
          "textRaw": "doubleTap()",
          "type": "method",
          "name": "doubleTap",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>两次触摸点击</p>\n"
        },
        {
          "textRaw": "longPress()",
          "type": "method",
          "name": "longPress",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>长按</p>\n"
        },
        {
          "textRaw": "flick()",
          "type": "method",
          "name": "flick",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>flick</p>\n"
        },
        {
          "textRaw": "flickByElement(xOffset, yOffset, speed)",
          "type": "method",
          "name": "flickByElement",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                },
                {
                  "name": "yOffset"
                },
                {
                  "name": "speed"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "xOffset"
                },
                {
                  "name": "yOffset"
                },
                {
                  "name": "speed"
                }
              ]
            }
          ],
          "desc": "<p>flick</p>\n"
        },
        {
          "textRaw": "down(x, y)",
          "type": "method",
          "name": "down",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} x坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "x坐标"
                },
                {
                  "textRaw": "`y` {number} y坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "y坐标"
                },
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>down</p>\n"
        },
        {
          "textRaw": "up(x, y)",
          "type": "method",
          "name": "up",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} x坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "x坐标"
                },
                {
                  "textRaw": "`y` {number} y坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "y坐标"
                },
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>up</p>\n"
        },
        {
          "textRaw": "move(x, y)",
          "type": "method",
          "name": "move",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} x坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "x坐标"
                },
                {
                  "textRaw": "`y` {number} y坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "y坐标"
                },
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>move</p>\n"
        },
        {
          "textRaw": "scroll(x, y)",
          "type": "method",
          "name": "scroll",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} x坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "x坐标"
                },
                {
                  "textRaw": "`y` {number} y坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "y坐标"
                },
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>滚动</p>\n"
        },
        {
          "textRaw": "scrollByElement(x, y)",
          "type": "method",
          "name": "scrollByElement",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`x` {number} x坐标 ",
                  "name": "x",
                  "type": "number",
                  "desc": "x坐标"
                },
                {
                  "textRaw": "`y` {number} y坐标 ",
                  "name": "y",
                  "type": "number",
                  "desc": "y坐标"
                },
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "x"
                },
                {
                  "name": "y"
                }
              ]
            }
          ],
          "desc": "<p>滚动</p>\n"
        },
        {
          "textRaw": "perform()",
          "type": "method",
          "name": "perform",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{TouchActionsBinding} ",
                  "type": "TouchActionsBinding"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>执行</p>\n<pre><code class=\"lang-js\">findOne(&quot;id=xxx&quot;).touch().click().move(124, 435).perform();\n</code></pre>\n<!-- [end-include:touch.md] -->\n<!-- [start-include:log.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "TouchActionsBinding"
    },
    {
      "textRaw": "LoggerBinding",
      "name": "loggerbinding",
      "desc": "<p>提供日志记录，可以直接通过 log 访问，如 <code>log.info(&#39;xxx&#39;)</code></p>\n",
      "methods": [
        {
          "textRaw": "error(message, e)",
          "type": "method",
          "name": "error",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {string} 消息 ",
                  "name": "message",
                  "type": "string",
                  "desc": "消息"
                },
                {
                  "textRaw": "`e` {Object} 异常 error 日志 ",
                  "name": "e",
                  "type": "Object",
                  "desc": "异常 error 日志"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "message"
                },
                {
                  "name": "e"
                }
              ]
            }
          ],
          "desc": "<!-- [end-include:log.md] -->\n<!-- [start-include:auto.md] -->\n"
        },
        {
          "textRaw": "invokeMethod(name, args)",
          "type": "method",
          "name": "invokeMethod",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`name` {string} 方法名 ",
                  "name": "name",
                  "type": "string",
                  "desc": "方法名"
                },
                {
                  "textRaw": "`args` {Object[]} 方法参数 打印 方法及参数的 info 日志 ",
                  "name": "args",
                  "type": "Object[]",
                  "desc": "方法参数 打印 方法及参数的 info 日志"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "name"
                },
                {
                  "name": "args"
                }
              ]
            }
          ],
          "desc": "<!-- [end-include:log.md] -->\n<!-- [start-include:auto.md] -->\n"
        }
      ],
      "type": "module",
      "displayName": "LoggerBinding"
    },
    {
      "textRaw": "模块及函数",
      "name": "模块及函数",
      "desc": "<p>基于 JS 自动化测试框架扩展的业务模块及函数，方便直接调用封装函数解决问题。</p>\n<p>如登录 <code>auto.randMobile()</code> 等。</p>\n<ul>\n<li>业务基础函数在 include 目录下（包含auto / jira 等对象定义）</li>\n<li>业务模块在 common 目录下（包含http/代理等模块）</li>\n<li>业务数据依赖在 dependency 目录下（可以直接依赖基础数据）</li>\n</ul>\n",
      "modules": [
        {
          "textRaw": "基础函数",
          "name": "基础函数",
          "modules": [
            {
              "textRaw": "auto",
              "name": "auto",
              "desc": "<p>auto 对象提供常用的自动化函数，具体查看  include/auto.js</p>\n<pre><code class=\"lang-js\">// 加载 http 模块\nauto.loadCommon(&#39;http&#39;);\n\n// 依赖demo数据\nauto.dependency(&#39;demo&#39;, {name: &#39;xxx&#39;});\n\n// table 滚动到最右边\nauto.scroll(findOne(&#39;css=.el-table__body-wrapper&#39;), null, 0);\n</code></pre>\n",
              "type": "module",
              "displayName": "auto"
            },
            {
              "textRaw": "jira",
              "name": "jira",
              "desc": "<p>jira 对象提供 JIRA 操作，具体函数见  include/jira.js</p>\n<pre><code class=\"lang-js\">// 登录 jira\njira.login();\n\n// 提bug\njira.createIssue(&#39;测试&#39;, &#39;程序有bug&#39;);\n</code></pre>\n",
              "type": "module",
              "displayName": "jira"
            }
          ],
          "type": "module",
          "displayName": "基础函数"
        },
        {
          "textRaw": "业务模块",
          "name": "业务模块",
          "desc": "<p>调用模块需要先引用模块，如 <code>auto.loadCommon(&#39;http&#39;);</code> 建议放代码最前面。</p>\n",
          "modules": [
            {
              "textRaw": "http",
              "name": "http",
              "desc": "<p>http 模块，主要操作HTTP请求，如GET/POST请求，具体函数见 common/http.js</p>\n<pre><code class=\"lang-js\">auto.loadCommon(&#39;http&#39;);\n\nhttp.get(&#39;http://www.baidu.com&#39;);\n\nhttp.post(&#39;/api/ouser-web/mobileLogin/login.do&#39;, { username: &#39;superadmin&#39;, password: &#39;123456&#39;});\n\nlet response = http.request(&#39;/oms-web/so/list.do&#39;, &#39;POST&#39;);\nprintln(&#39;response: &#39; + response.data);\nlet ut = http.getCookie(&#39;ut&#39;);\nprintln(&#39;ut: &#39; + ut);\n</code></pre>\n",
              "type": "module",
              "displayName": "http"
            },
            {
              "textRaw": "proxy",
              "name": "proxy",
              "desc": "<p>proxy 模块，主要用于 js 对象代理，具体函数见 common/proxy.js</p>\n<pre><code class=\"lang-js\">auto.loadCommon(&#39;proxy&#39;);\n\nlet p = new ProxyAdapter({}, function (obj, name, args, apply) {\n    println(name + &#39;方法被代理了 --before&#39;);\n    let result = apply();\n    println(name + &#39;方法被代理了 --after&#39;);\n    return result;\n});\n\np.hello = function() {\n    println(&#39;hello~&#39;);\n}\n\np.hello();\n// hello方法被代理了 --before\n// hello~\n// hello方法被代理了 --after\n</code></pre>\n<!-- [end-include:auto.md] -->\n<!-- [start-include:demo.md] -->\n",
              "type": "module",
              "displayName": "proxy"
            }
          ],
          "type": "module",
          "displayName": "业务模块"
        }
      ],
      "type": "module",
      "displayName": "模块及函数"
    },
    {
      "textRaw": "Demo 示例",
      "name": "demo_示例",
      "modules": [
        {
          "textRaw": "百度搜索 “中国”，进入百度百科结果",
          "name": "百度搜索_“中国”，进入百度百科结果",
          "desc": "<pre><code class=\"lang-js\">// demo 演示 中国百度百科\n// @author luozhuowei\n\n// 百度 &quot;中国&quot;\nbaiduSearch(&#39;中国&#39;);\n// 获取搜索结果\nlet list = findDisplayed(&#39;css=div#content_left &gt; div&#39;);\n// 变量搜索结果\nfor (let i in list) {\n    let element = list[i].findOne(&quot;css=h3 &gt; a&quot;);\n    // 判断结果是否为百度百科\n    if (element &amp;&amp; element.text().endsWith(&quot;百度百科&quot;)) {\n        // 点击\n        element.click();\n        // 等待页面加载\n        waitForPageLoaded(10);\n        // 切换到新打开的窗口\n        switchToNextWindow();\n        break;\n    }\n}\n\nfunction baiduSearch(str) {\n    open(&quot;https://www.baidu.com&quot;);\n    sendKeys(&#39;id=kw&#39;, str);\n    click(&quot;css=input[value=&#39;百度一下&#39;]&quot;);\n    waitForPageLoaded(5);\n}\n</code></pre>\n",
          "type": "module",
          "displayName": "百度搜索 “中国”，进入百度百科结果"
        },
        {
          "textRaw": "起点小说网搜索并下载斗破苍穹",
          "name": "起点小说网搜索并下载斗破苍穹",
          "desc": "<pre><code class=\"lang-js\">// demo 演示 爬小说\n// @author luozhuowei\n\nlet bookName = &#39;斗破苍穹&#39;;\n// 爬取前5章\nlet chapterCount = 5;\n// 保存到桌面\nlet savePath = env.getString(&#39;DESKTOP_DIR&#39;) + &#39;\\\\斗破苍穹.txt&#39;;\n\nlog.info(&#39;正在下载: &#39; + bookName);\nlog.info(&#39;保存路径: &#39; + savePath);\n\n// 起点小说\nopen(&#39;https://www.qidian.com&#39;);\n// 搜索\nsendKeys(&#39;id=s-box&#39;, bookName);\ntryClick(&#39;id=search-btn&#39;);\nswitchToNextWindow();\nwaitForPageLoaded();\nsleep(500);\n\n// 点击搜索结果\nfindOne(&#39;css=#result-list&#39;).findOne(&#39;linkText=&#39; + bookName).tryClick();\nswitchToNextWindow();\nwaitForPageLoaded();\n\n// 点击“免费试读”\nfindText(&#39;a&#39;, &#39;免费试读&#39;, false).tryClick();\nwaitForPageLoaded();\n\n// 关闭广告弹窗\ntryClick(&#39;css=a.lbf-panel-close&#39;);\nsleep(200);\n\nfor (let i = 0; i &lt; chapterCount; i++) {\n    // 小说主体\n    let bookBody = findOne(&#39;css=#j_chapterBox div.main-text-wrap&#39;);\n    // 移除评论\n    executeScript(&quot;document.querySelectorAll(&#39;span.review-count&#39;).forEach(item =&gt; item.remove());&quot;);\n    // 小说标题\n    let title = bookBody.findOne(&#39;css=.j_chapterName&#39;).text();\n    log.info(title);\n    // 小说内容\n    let context = bookBody.findOne(&#39;css=div.read-content.j_readContent&#39;).text().replace(/[\\n]/g, &#39;\\r\\n\\r\\n&#39;);\n    // 保存小说\n    writeText(savePath, title + &#39;\\r\\n\\r\\n&#39; + context + &#39;\\r\\n\\r\\n\\r\\n\\r\\n&#39;, true);\n    // 下一章\n    let nextPage = findOne(&#39;id=j_chapterNext&#39;);\n    if (nextPage) {\n        nextPage.tryClick();\n        waitForPageLoaded();\n        sleep(200);\n    } else {\n        break;\n    }\n}\n</code></pre>\n<!-- [end-include:demo.md] -->\n",
          "type": "module",
          "displayName": "起点小说网搜索并下载斗破苍穹"
        }
      ],
      "type": "module",
      "displayName": "Demo 示例"
    }
  ]
}