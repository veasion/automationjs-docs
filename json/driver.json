{
  "source": "..\\docs\\driver.md",
  "modules": [
    {
      "textRaw": "WebDriverBinding",
      "name": "webdriverbinding",
      "desc": "<p>driver 模块提供一系列函数，继承 SearchContextBinding 类，用于元素查找，数据库操作等。</p>\n<p>该 api 函数可以直接方法访问，如 <code>click(target)</code> 方式调用，等价于 <code>driver.click(target)</code></p>\n<p>js 脚本绑定的 java 后台类 cn.veasion.auto.bind.WebDriverBinding</p>\n",
      "methods": [
        {
          "textRaw": "open(url)",
          "type": "method",
          "name": "open",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 网址 ",
                  "name": "url",
                  "type": "string",
                  "desc": "网址"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                }
              ]
            }
          ],
          "desc": "<p>打开页面并等待页面加载</p>\n<pre><code class=\"lang-js\">open(&quot;http://www.baidu.com&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "pause(millis)",
          "type": "method",
          "name": "pause",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`millis` {number} 毫秒 ",
                  "name": "millis",
                  "type": "number",
                  "desc": "毫秒"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "millis"
                }
              ]
            }
          ],
          "desc": "<p>暂停多少毫秒，等价于 sleep</p>\n<pre><code class=\"lang-js\">pause(500);\n</code></pre>\n"
        },
        {
          "textRaw": "sleep(millis)",
          "type": "method",
          "name": "sleep",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`millis` {number} 毫秒 ",
                  "name": "millis",
                  "type": "number",
                  "desc": "毫秒"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "millis"
                }
              ]
            }
          ],
          "desc": "<p>暂停多少毫秒，等价于 pause</p>\n<pre><code class=\"lang-js\">sleep(500);\n</code></pre>\n"
        },
        {
          "textRaw": "executeScript(jsCode)",
          "type": "method",
          "name": "executeScript",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jsCode` {string} js 脚本 ",
                  "name": "jsCode",
                  "type": "string",
                  "desc": "js 脚本"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jsCode"
                }
              ]
            }
          ],
          "desc": "<p>向浏览器驱动执行 js 代码</p>\n<pre><code class=\"lang-js\">executeScript(&quot;alert(&#39;hello&#39;);&quot;);\n</code></pre>\n"
        },
        {
          "textRaw": "executeScriptByParams(jsCode, args)",
          "type": "method",
          "name": "executeScriptByParams",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jsCode` {string} js代码 ",
                  "name": "jsCode",
                  "type": "string",
                  "desc": "js代码"
                },
                {
                  "textRaw": "`args` {array?} 参数 ",
                  "name": "args",
                  "type": "array?",
                  "desc": "参数"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jsCode"
                },
                {
                  "name": "args"
                }
              ]
            }
          ],
          "desc": "<p>向浏览器驱动执行 js 代码（带参数）</p>\n<pre><code class=\"lang-js\">executeScriptByParams(&quot;arguments[0].click()&quot;, element);\n</code></pre>\n"
        },
        {
          "textRaw": "command(command)",
          "type": "method",
          "name": "command",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`command` {Object} json命令 ",
                  "name": "command",
                  "type": "Object",
                  "desc": "json命令"
                },
                {
                  "textRaw": "{Object} ",
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "command"
                }
              ]
            }
          ],
          "desc": "<p>执行 json 命令，兼容 js 调用 json 自动化脚本</p>\n<pre><code class=\"lang-js\">command({ &quot;command&quot;: &quot;click&quot;, &quot;target&quot;: &quot;css=button&quot; });\ncommand(&#39;{ &quot;command&quot;: &quot;click&quot;, &quot;target&quot;: &quot;css=button&quot; }&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "assertResult(flag, message)",
          "type": "method",
          "name": "assertResult",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`flag` {boolean} 是否通过 ",
                  "name": "flag",
                  "type": "boolean",
                  "desc": "是否通过"
                },
                {
                  "textRaw": "`message` {string} 断言信息 ",
                  "name": "message",
                  "type": "string",
                  "desc": "断言信息"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "flag"
                },
                {
                  "name": "message"
                }
              ]
            }
          ],
          "desc": "<p>断言，当 flag 为 true 时表示断言通过，false 为断言失败抛出异常 message</p>\n<pre><code class=\"lang-js\">assertResult(true, &#39;断言测试通过&#39;);\n// 断言元素存在\nassertResult(findOne(&#39;id=xxx&#39;) != null, &#39;断言元素存在&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "waitForPageLoaded(seconds)",
          "type": "method",
          "name": "waitForPageLoaded",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`seconds` {number?} 最大等待秒数 ",
                  "name": "seconds",
                  "type": "number?",
                  "desc": "最大等待秒数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "seconds"
                }
              ]
            }
          ],
          "desc": "<p>等待页面加载，通常在页面重新加载或刷新时使用。</p>\n<pre><code class=\"lang-js\">waitForPageLoaded(10);\n</code></pre>\n"
        },
        {
          "textRaw": "iframe(target, fun)",
          "type": "method",
          "name": "iframe",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`target` {string} 元素选择器 ",
                  "name": "target",
                  "type": "string",
                  "desc": "元素选择器"
                },
                {
                  "textRaw": "`fun` {Function} 函数 ",
                  "name": "fun",
                  "type": "Function",
                  "desc": "函数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "target"
                },
                {
                  "name": "fun"
                }
              ]
            }
          ],
          "desc": "<p>当前浏览器操作切换至 target 元素  iframe 框架里</p>\n<pre><code class=\"lang-js\">iframe(&#39;id=iframe&#39;, function () {\n    println(findOne(&#39;css=body&#39;).text());\n});\n</code></pre>\n"
        },
        {
          "textRaw": "formatDate(date, pattern)",
          "type": "method",
          "name": "formatDate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`date` {Object} 时间 (时间对象/毫秒数) ",
                  "name": "date",
                  "type": "Object",
                  "desc": "时间 (时间对象/毫秒数)"
                },
                {
                  "textRaw": "`pattern` {string} 格式化 format ",
                  "name": "pattern",
                  "type": "string",
                  "desc": "格式化 format"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "date"
                },
                {
                  "name": "pattern"
                }
              ]
            }
          ],
          "desc": "<p>格式化时间</p>\n<pre><code class=\"lang-js\">// 时间格式化\nformatDate(new Date(), &#39;yyyy-MM-dd HH:mm:ss&#39;);\n// 毫秒数格式化\nformatDate(1607430878907, &#39;yyyy-MM-dd HH:mm:ss&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "randCode(length)",
          "type": "method",
          "name": "randCode",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`length` {number} 长度 ",
                  "name": "length",
                  "type": "number",
                  "desc": "长度"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "length"
                }
              ]
            }
          ],
          "desc": "<p>随机字符串（数字）</p>\n<pre><code class=\"lang-js\">randCode(8);\n</code></pre>\n"
        },
        {
          "textRaw": "println(message, args)",
          "type": "method",
          "name": "println",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`message` {Object} 消息 ",
                  "name": "message",
                  "type": "Object",
                  "desc": "消息"
                },
                {
                  "textRaw": "`args` {array?} 参数 ",
                  "name": "args",
                  "type": "array?",
                  "desc": "参数"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "message"
                },
                {
                  "name": "args"
                }
              ]
            }
          ],
          "desc": "<p>打印，输出到控制台</p>\n"
        },
        {
          "textRaw": "calculate(str, n)",
          "type": "method",
          "name": "calculate",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`str` {string} 运算表达式 ",
                  "name": "str",
                  "type": "string",
                  "desc": "运算表达式"
                },
                {
                  "textRaw": "`n` {number} 保留几位小数 ",
                  "name": "n",
                  "type": "number",
                  "desc": "保留几位小数"
                },
                {
                  "textRaw": "{string} 返回计算结果 ",
                  "type": "string",
                  "desc": "返回计算结果"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "str"
                },
                {
                  "name": "n"
                }
              ]
            }
          ],
          "desc": "<p>计算器</p>\n<pre><code class=\"lang-js\">// 计算，保留两位小数\nlet result = calculate(&#39;√(3*3)+4.99+(5.99+6.99)*1.06^2&#39;, 2);\nprintln(&#39;计算结果：&#39; + result);\n</code></pre>\n"
        },
        {
          "textRaw": "writeText(path, context, append, charsetName)",
          "type": "method",
          "name": "writeText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                },
                {
                  "textRaw": "`context` {string} 文本内容 ",
                  "name": "context",
                  "type": "string",
                  "desc": "文本内容"
                },
                {
                  "textRaw": "`append` {boolean} 是否追加 ",
                  "name": "append",
                  "type": "boolean",
                  "desc": "是否追加"
                },
                {
                  "textRaw": "`charsetName` {string?} 编码，默认UTF-8 ",
                  "name": "charsetName",
                  "type": "string?",
                  "desc": "编码，默认UTF-8"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                },
                {
                  "name": "context"
                },
                {
                  "name": "append"
                },
                {
                  "name": "charsetName"
                }
              ]
            }
          ],
          "desc": "<p>写文本文件</p>\n<pre><code class=\"lang-js\">// 写文本文件\nwriteText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;hello&#39;, false);\n// 追加文本文件\nwriteText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;veasion&#39;, true);\n</code></pre>\n"
        },
        {
          "textRaw": "readText(pathOrUrl, charsetName)",
          "type": "method",
          "name": "readText",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`pathOrUrl` {string} 路径或网址 ",
                  "name": "pathOrUrl",
                  "type": "string",
                  "desc": "路径或网址"
                },
                {
                  "textRaw": "`charsetName` {string?} 编码，默认UTF-8 ",
                  "name": "charsetName",
                  "type": "string?",
                  "desc": "编码，默认UTF-8"
                },
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "pathOrUrl"
                },
                {
                  "name": "charsetName"
                }
              ]
            }
          ],
          "desc": "<p>读取文本，可以读本地文本文件和网络文本</p>\n<pre><code class=\"lang-js\">// 读取网络文本\nreadText(&#39;http://www.baidu.com&#39;, &#39;utf-8&#39;);\n// 读取本地文本文件\nreadText(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\test.txt&#39;, &#39;utf-8&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "runNewJs(path)",
          "type": "method",
          "name": "runNewJs",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "路径"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>在一个新的环境运行 js 脚本</p>\n<pre><code class=\"lang-js\">// 相对路径\nrunNewJs(env.getSourcePath(&#39;/demo/demo.js&#39;));\n// 绝对路径\nrunNewJs(&#39;D:\\Veasion\\projects\\\\automation_testing\\src\\main\\resources\\demo\\demo.js&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "screenshot(path)",
          "type": "method",
          "name": "screenshot",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`path` {string} 图片存放路径 ",
                  "name": "path",
                  "type": "string",
                  "desc": "图片存放路径"
                },
                {
                  "textRaw": "{boolean} ",
                  "type": "boolean"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "path"
                }
              ]
            }
          ],
          "desc": "<p>浏览器截图并保存到指定位置</p>\n<pre><code class=\"lang-js\">screenshot(&#39;C:\\\\Users\\\\user\\\\Desktop\\\\temp.png&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "getWindowHandle()",
          "type": "method",
          "name": "getWindowHandle",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "{string} ",
                  "type": "string"
                }
              ]
            },
            {
              "params": []
            }
          ],
          "desc": "<p>获取当前窗口句柄</p>\n"
        },
        {
          "textRaw": "openNewWindow()",
          "type": "method",
          "name": "openNewWindow",
          "desc": "<p>打开并切换到新的窗口</p>\n",
          "signatures": [
            {
              "params": []
            }
          ]
        },
        {
          "textRaw": "withNewWindow(fun)",
          "type": "method",
          "name": "withNewWindow",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`fun` {Function} 方法 ",
                  "name": "fun",
                  "type": "Function",
                  "desc": "方法"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "fun"
                }
              ]
            }
          ],
          "desc": "<p>在新的窗口中执行函数</p>\n<pre><code class=\"lang-js\">// 新窗口执行代码\nwithNewWindow(function () {\n    open(&#39;http://www.baidu.com&#39;);\n});\n</code></pre>\n"
        },
        {
          "textRaw": "switchToNextWindow(windowHandle)",
          "type": "method",
          "name": "switchToNextWindow",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`windowHandle` {string} 指定窗口句柄，为 null 则切换为下一个窗口 ",
                  "name": "windowHandle",
                  "type": "string",
                  "desc": "指定窗口句柄，为 null 则切换为下一个窗口"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "windowHandle"
                }
              ]
            }
          ],
          "desc": "<p>切换窗口</p>\n<pre><code class=\"lang-js\">// 获取当前窗口句柄\nlet currentHandle = getWindowHandle();\n// 切换下一个窗口\nswitchToNextWindow();\n// 切换到指定窗口\nswitchToNextWindow(currentHandle);\n</code></pre>\n"
        },
        {
          "textRaw": "createJdbcConnection(jdbcUrl, user, password)",
          "type": "method",
          "name": "createJdbcConnection",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`jdbcUrl` {string} 数据库jdbc连接url ",
                  "name": "jdbcUrl",
                  "type": "string",
                  "desc": "数据库jdbc连接url"
                },
                {
                  "textRaw": "`user` {string} 数据库用户名 ",
                  "name": "user",
                  "type": "string",
                  "desc": "数据库用户名"
                },
                {
                  "textRaw": "`password` {string} 数据库密码 ",
                  "name": "password",
                  "type": "string",
                  "desc": "数据库密码"
                },
                {
                  "textRaw": "{JdbcConnectionBinding} ",
                  "type": "JdbcConnectionBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "jdbcUrl"
                },
                {
                  "name": "user"
                },
                {
                  "name": "password"
                }
              ]
            }
          ],
          "desc": "<p>数据库连接，操作数据库</p>\n<pre><code class=\"lang-js\">// 创建连接\nlet db = createJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n// 查询列表\ndb.query(&#39;select id, user_name, sex from t_user where status = ? limit ?&#39;, [1, 10]);\n// 查询单个\ndb.queryOnly(&#39;select database()&#39;, null);\n// 新增\ndb.insert(&#39;insert into t_user(user_name, sex) values (?, ?)&#39;, [&#39;veasion&#39;, &#39;男&#39;]);\n// 修改\ndb.update(&#39;update t_user set user_name = ? where id = ?&#39;, [&#39;xxx&#39;, 1]);\n// 关闭连接\ndb.close();\n</code></pre>\n"
        },
        {
          "textRaw": "createMysqlConnection(ip, port, database, user, password)",
          "type": "method",
          "name": "createMysqlConnection",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`ip` {string} 数据库ip地址 ",
                  "name": "ip",
                  "type": "string",
                  "desc": "数据库ip地址"
                },
                {
                  "textRaw": "`port` {number} 数据库端口 ",
                  "name": "port",
                  "type": "number",
                  "desc": "数据库端口"
                },
                {
                  "textRaw": "`database` {string} 数据库 ",
                  "name": "database",
                  "type": "string",
                  "desc": "数据库"
                },
                {
                  "textRaw": "`user` {string} 数据库用户名 ",
                  "name": "user",
                  "type": "string",
                  "desc": "数据库用户名"
                },
                {
                  "textRaw": "`password` {string} 数据库密码 ",
                  "name": "password",
                  "type": "string",
                  "desc": "数据库密码"
                },
                {
                  "textRaw": "{JdbcConnectionBinding} ",
                  "type": "JdbcConnectionBinding"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "ip"
                },
                {
                  "name": "port"
                },
                {
                  "name": "database"
                },
                {
                  "name": "user"
                },
                {
                  "name": "password"
                }
              ]
            }
          ],
          "desc": "<p>mysql 数据库连接，操作 mysql 数据库</p>\n<pre><code class=\"lang-js\">// mysql 数据库连接\ncreateMysqlConnection(&#39;127.0.0.1&#39;, 3306, &#39;user&#39;, &#39;root&#39;, &#39;123456&#39;);\n// 等价于\ncreateJdbcConnection(&#39;jdbc:mysql://127.0.0.1:3306/user?useUnicode=true&amp;characterEncoding=utf-8&#39;, &#39;root&#39;, &#39;123456&#39;);\n</code></pre>\n"
        },
        {
          "textRaw": "request(url, method, content, headers)",
          "type": "method",
          "name": "request",
          "signatures": [
            {
              "params": [
                {
                  "textRaw": "`url` {string} 请求url/uri ",
                  "name": "url",
                  "type": "string",
                  "desc": "请求url/uri"
                },
                {
                  "textRaw": "`method` {string?} 请求方式 POST/GET 默认GET ",
                  "name": "method",
                  "type": "string?",
                  "desc": "请求方式 POST/GET 默认GET"
                },
                {
                  "textRaw": "`content` {Object?} 请求body内容 ",
                  "name": "content",
                  "type": "Object?",
                  "desc": "请求body内容"
                },
                {
                  "textRaw": "`headers` {Object?} 请求头 ",
                  "name": "headers",
                  "type": "Object?",
                  "desc": "请求头"
                },
                {
                  "textRaw": "{Object} ",
                  "options": [
                    {
                      "textRaw": "`status`{number} 请求状态，正常 200 ",
                      "name": "status",
                      "type": "number",
                      "desc": "请求状态，正常 200"
                    },
                    {
                      "textRaw": "`success` {boolean} 请求是否成功 ",
                      "name": "success",
                      "type": "boolean",
                      "desc": "请求是否成功"
                    },
                    {
                      "textRaw": "`data` {string} 返回数据，response ",
                      "name": "data",
                      "type": "string",
                      "desc": "返回数据，response"
                    },
                    {
                      "textRaw": "`headers` {Object} 返回 headers ",
                      "name": "headers",
                      "type": "Object",
                      "desc": "返回 headers"
                    },
                    {
                      "textRaw": "`targetHost` {string} 目标服务器ip地址 ",
                      "name": "targetHost",
                      "type": "string",
                      "desc": "目标服务器ip地址"
                    }
                  ],
                  "type": "Object"
                }
              ]
            },
            {
              "params": [
                {
                  "name": "url"
                },
                {
                  "name": "method"
                },
                {
                  "name": "content"
                },
                {
                  "name": "headers"
                }
              ]
            }
          ],
          "desc": "<p>http 请求，请求 XHR 接口</p>\n<pre><code class=\"lang-js\">// GET请求\nlet getResp = request(&#39;http://www.baidu.com&#39;, &#39;GET&#39;);\nif (getResp.success) {\n    log.info(&#39;请求成功：&#39; + getResp.data);\n} else {\n    log.error(&quot;请求失败，status: &quot; + getResp.status);\n}\n\n// POST请求\nlet postResp = request(&#39;/api/ouser-web/mobileLogin/login.do&#39;, &#39;POST&#39;, { username: &#39;superadmin&#39;, password: &#39;123456&#39;}, { &#39;Content-Type&#39;: &#39;application/json;charset=UTF-8&#39; });\nif (postResp.success) {\n    log.info(&#39;请求成功：&#39; + JSON.parse(postResp.data));\n} else {\n    log.error(&quot;请求失败，status: &quot; + postResp.status);\n}\n</code></pre>\n"
        }
      ],
      "modules": [
        {
          "textRaw": "info",
          "name": "info",
          "desc": "<ul>\n<li>{string}</li>\n</ul>\n<p>获取当前脚本环境信息。</p>\n",
          "type": "module",
          "displayName": "info"
        }
      ],
      "type": "module",
      "displayName": "WebDriverBinding"
    }
  ]
}